// src/main/java/com/webcomic/controller/CreatorController.java
package com.webcomic.controller;

import com.webcomic.model.Comic;
import com.webcomic.model.User;
import com.webcomic.repository.ComicRepository;
import com.webcomic.repository.UserRepository;
import com.webcomic.service.ComicService;
import com.webcomic.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users/creator")
public class CreatorController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private ComicService comicService;
    
    @Autowired
    private ComicRepository comicRepository;
    
    @Autowired
    private UserRepository userRepository;

    @GetMapping("/dashboard")
    public ResponseEntity<?> getCreatorDashboard(Authentication authentication) {
        User creator = userService.getCurrentUser(authentication);
        
        // Get creator's comics
        List<Comic> comics = comicRepository.findByCreatorId(creator.getId());
        
        // Calculate stats
        int totalComics = comics.size();
        int totalViews = comics.stream().mapToInt(Comic::getViews).sum();
        int totalLikes = comics.stream().mapToInt(Comic::getLikesCount).sum();
        int totalComments = comics.stream().mapToInt(Comic::getCommentsCount).sum();
        int totalSubscribers = userRepository.countFollowersByCreatorId(creator.getId());
        double totalRevenue = 0.0; // Calculate based on your business logic
        
        // Create response
        Map<String, Object> response = new HashMap<>();
        Map<String, Object> stats = new HashMap<>();
        stats.put("totalComics", totalComics);
        stats.put("totalViews", totalViews);
        stats.put("totalLikes", totalLikes);
        stats.put("totalComments", totalComments);
        stats.put("totalSubscribers", totalSubscribers);
        stats.put("totalRevenue", totalRevenue);
        
        // Create mock analytics data
        Map<String, Object> analytics = new HashMap<>();
        // Add your analytics data here
        
        response.put("stats", stats);
        response.put("analytics", analytics);
        
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/comics")
    public ResponseEntity<?> getCreatorComics(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            Authentication authentication) {
        User creator = userService.getCurrentUser(authentication);
        return ResponseEntity.ok(comicService.getComicsByCreatorId(creator.getId(), page, size));
    }
    
    // Add other endpoints as needed
}







// src/services/api.ts - Update the comicAPI object
export const comicAPI = {
  // Other methods...
  
  // Change this line
  createComic: (data: any) => api.post("/comics", data),
  
  // To this (ensuring correct path and handling FormData)
  createComic: (data: any) => {
    const formData = new FormData();
    
    // Add text fields
    formData.append("title", data.title);
    formData.append("description", data.description);
    formData.append("isSubscriptionRequired", String(data.isSubscriptionRequired));
    formData.append("isCompleted", String(data.isCompleted));
    
    if (data.subscriptionPrice) {
      formData.append("subscriptionPrice", String(data.subscriptionPrice));
    }
    
    // Add arrays
    data.genres.forEach((genre: string, index: number) => {
      formData.append(`genres[${index}]`, genre);
    });
    
    data.tags.forEach((tag: string, index: number) => {
      formData.append(`tags[${index}]`, tag);
    });
    
    // Add file
    if (data.coverImage) {
      formData.append("coverImage", data.coverImage);
    }
    
    return api.post("/comics", formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });
  },
}







// src/main/java/com/webcomic/service/FileStorageService.java
package com.webcomic.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Service
public class FileStorageService {

    @Value("${file.upload-dir}")
    private String uploadDir;

    public String storeFile(MultipartFile file) {
        try {
            // Create upload directory if it doesn't exist
            Path uploadPath = Paths.get(uploadDir).toAbsolutePath().normalize();
            Files.createDirectories(uploadPath);
            
            // Generate unique filename
            String originalFilename = file.getOriginalFilename();
            String fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
            String filename = UUID.randomUUID().toString() + fileExtension;
            
            // Save file
            Path targetLocation = uploadPath.resolve(filename);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            
            // Return file URL
            return "/uploads/" + filename;
        } catch (IOException ex) {
            throw new RuntimeException("Could not store file " + file.getOriginalFilename(), ex);
        }
    }
}







// src/main/java/com/webcomic/config/WebConfig.java
package com.webcomic.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOrigins("http://localhost:3000", "https://your-production-domain.com")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}






# File Storage Properties
file.upload-dir=./uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Configure static resource serving
spring.web.resources.static-locations=classpath:/static/,file:./uploads/








// src/main/java/com/webcomic/config/SecurityConfig.java
package com.webcomic.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .cors().and().csrf().disable()
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
                .antMatchers("/api/auth/**").permitAll()
                .antMatchers("/api/comics").permitAll()
                .antMatchers("/api/comics/**").permitAll()
                .antMatchers("/api/genres/**").permitAll()
                .antMatchers("/api/tags/**").permitAll()
                .antMatchers("/uploads/**").permitAll()
                .antMatchers("/api/users/creator/**").hasRole("CREATOR")
                .anyRequest().authenticated();
        
        // Add JWT filter
        http.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
    
    // Other beans...
}









## Testing the Changes

After implementing these changes:

1. Restart your backend server
2. Refresh your frontend application
3. Try accessing the creator dashboard and uploading a comic again